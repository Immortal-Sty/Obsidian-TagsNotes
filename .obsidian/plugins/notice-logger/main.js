/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoticeLoggerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  prefix: ""
};
var NoticeLoggerPlugin = class extends import_obsidian.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.observers = [];
  }
  async onload() {
    await this.loadSettings();
    const startObserving = (domNode, classToLookFor, settings) => {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach(function(mutation) {
          const elementAdded = Array.from(mutation.addedNodes).some(
            (element) => {
              if (element.classList) {
                if (element.classList.contains(classToLookFor)) {
                  return true;
                }
              } else {
                return false;
              }
            }
          );
          if (elementAdded) {
            mutation.addedNodes.forEach((notice) => {
              console.log(
                settings.prefix !== "" ? settings.prefix + " " + notice.textContent : "" + notice.textContent
              );
            });
          }
        });
      });
      observer.observe(domNode, {
        childList: true,
        attributes: true,
        characterData: true,
        subtree: true
      });
      this.observers.push(observer);
      return observer;
    };
    const parent = document.querySelector("body");
    startObserving(parent, "notice", this.settings);
    this.addSettingTab(new NoticeLoggerSettingTab(this.app, this));
    console.log("Notice logger plugin loaded");
  }
  onunload() {
    this.observers.forEach((obs) => {
      obs.disconnect();
    });
    console.log("Notice logger plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var NoticeLoggerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Prefix").setDesc("Prepend console log lines with this string. (i.e. \u2705)").addText((text) => text.setPlaceholder("Enter your prefix").setValue(this.plugin.settings.prefix).onChange(async (value) => {
      this.plugin.settings.prefix = value;
      await this.plugin.saveSettings();
    }));
  }
};
