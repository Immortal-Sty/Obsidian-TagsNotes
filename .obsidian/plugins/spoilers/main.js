/** GENERATED BY OBSIDIAN-PLUGIN-CLI, DO NOT EDIT */
var P=Object.create;var f=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var K=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var N=e=>f(e,"__esModule",{value:!0});var k=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),Y=(e,n)=>{N(e);for(var t in n)f(e,t,{get:n[t],enumerable:!0})},M=(e,n,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of R(n))!L.call(e,o)&&o!=="default"&&f(e,o,{get:()=>n[o],enumerable:!(t=$(n,o))||t.enumerable});return e},E=e=>M(N(f(e!=null?P(K(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var T=k((oe,B)=>{B.exports={name:"dotenv",version:"16.4.5",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3",decache:"^4.6.1",sinon:"^14.0.1",standard:"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0",tap:"^16.3.0",tar:"^6.1.11",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}}});var V=k((se,u)=>{var m=require("fs"),y=require("path"),U=require("os"),F=require("crypto"),q=T(),b=q.version,W=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function G(e){let n={},t=e.toString();t=t.replace(/\r\n?/mg,`
`);let o;for(;(o=W.exec(t))!=null;){let a=o[1],r=o[2]||"";r=r.trim();let s=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),s==='"'&&(r=r.replace(/\\n/g,`
`),r=r.replace(/\\r/g,"\r")),n[a]=r}return n}function J(e){let n=x(e),t=l.configDotenv({path:n});if(!t.parsed){let s=new Error(`MISSING_DATA: Cannot parse ${n} for an unknown reason`);throw s.code="MISSING_DATA",s}let o=C(e).split(","),a=o.length,r;for(let s=0;s<a;s++)try{let i=o[s].trim(),c=z(t,i);r=l.decrypt(c.ciphertext,c.key);break}catch(i){if(s+1>=a)throw i}return l.parse(r)}function Q(e){console.log(`[dotenv@${b}][INFO] ${e}`)}function H(e){console.log(`[dotenv@${b}][WARN] ${e}`)}function v(e){console.log(`[dotenv@${b}][DEBUG] ${e}`)}function C(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function z(e,n){let t;try{t=new URL(n)}catch(i){if(i.code==="ERR_INVALID_URL"){let c=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw c.code="INVALID_DOTENV_KEY",c}throw i}let o=t.password;if(!o){let i=new Error("INVALID_DOTENV_KEY: Missing key part");throw i.code="INVALID_DOTENV_KEY",i}let a=t.searchParams.get("environment");if(!a){let i=new Error("INVALID_DOTENV_KEY: Missing environment part");throw i.code="INVALID_DOTENV_KEY",i}let r=`DOTENV_VAULT_${a.toUpperCase()}`,s=e.parsed[r];if(!s){let i=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${r} in your .env.vault file.`);throw i.code="NOT_FOUND_DOTENV_ENVIRONMENT",i}return{ciphertext:s,key:o}}function x(e){let n=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(let t of e.path)m.existsSync(t)&&(n=t.endsWith(".vault")?t:`${t}.vault`);else n=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else n=y.resolve(process.cwd(),".env.vault");return m.existsSync(n)?n:null}function O(e){return e[0]==="~"?y.join(U.homedir(),e.slice(1)):e}function X(e){Q("Loading env from encrypted .env.vault");let n=l._parseVault(e),t=process.env;return e&&e.processEnv!=null&&(t=e.processEnv),l.populate(t,n,e),{parsed:n}}function Z(e){let n=y.resolve(process.cwd(),".env"),t="utf8",o=Boolean(e&&e.debug);e&&e.encoding?t=e.encoding:o&&v("No encoding is specified. UTF-8 is used by default");let a=[n];if(e&&e.path)if(!Array.isArray(e.path))a=[O(e.path)];else{a=[];for(let c of e.path)a.push(O(c))}let r,s={};for(let c of a)try{let d=l.parse(m.readFileSync(c,{encoding:t}));l.populate(s,d,e)}catch(d){o&&v(`Failed to load ${c} ${d.message}`),r=d}let i=process.env;return e&&e.processEnv!=null&&(i=e.processEnv),l.populate(i,s,e),r?{parsed:s,error:r}:{parsed:s}}function ee(e){if(C(e).length===0)return l.configDotenv(e);let n=x(e);return n?l._configVault(e):(H(`You set DOTENV_KEY but you are missing a .env.vault file at ${n}. Did you forget to build it?`),l.configDotenv(e))}function te(e,n){let t=Buffer.from(n.slice(-64),"hex"),o=Buffer.from(e,"base64"),a=o.subarray(0,12),r=o.subarray(-16);o=o.subarray(12,-16);try{let s=F.createDecipheriv("aes-256-gcm",t,a);return s.setAuthTag(r),`${s.update(o)}${s.final()}`}catch(s){let i=s instanceof RangeError,c=s.message==="Invalid key length",d=s.message==="Unsupported state or unable to authenticate data";if(i||c){let g=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw g.code="INVALID_DOTENV_KEY",g}else if(d){let g=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw g.code="DECRYPTION_FAILED",g}else throw s}}function ne(e,n,t={}){let o=Boolean(t&&t.debug),a=Boolean(t&&t.override);if(typeof n!="object"){let r=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw r.code="OBJECT_REQUIRED",r}for(let r of Object.keys(n))Object.prototype.hasOwnProperty.call(e,r)?(a===!0&&(e[r]=n[r]),o&&v(a===!0?`"${r}" is already defined and WAS overwritten`:`"${r}" is already defined and was NOT overwritten`)):e[r]=n[r]}var l={configDotenv:Z,_configVault:X,_parseVault:J,config:ee,decrypt:te,parse:G,populate:ne};u.exports.configDotenv=l.configDotenv;u.exports._configVault=l._configVault;u.exports._parseVault=l._parseVault;u.exports.config=l.config;u.exports.decrypt=l.decrypt;u.exports.parse=l.parse;u.exports.populate=l.populate;u.exports=l});Y(exports,{default:()=>_});var p=E(require("obsidian")),S=E(V());var I={showOnExport:!0};var h=E(require("obsidian")),w=class extends h.PluginSettingTab{constructor(n,t){super(n,t);this.plugin=t}display(){this.containerEl.empty(),new h.Setting(this.containerEl).setName("Show in export").setDesc("Whether to reveal the spoiler contents when exporting the file").addToggle(n=>{n.setValue(this.plugin.settings.showOnExport),n.onChange(async t=>{this.plugin.settings.showOnExport=t,await this.plugin.saveSettings()})})}};var _=class extends p.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new w(this.app,this)),this.addCommand({id:"spoiler-plain-text",name:"Create spoiler - Plain text",editorCallback:t=>{t.replaceRange("```spoiler\n\n```",t.getCursor())}}),this.addCommand({id:"spoiler-markdown",name:"Create spoiler - Markdown",editorCallback:t=>{t.replaceRange("```spoiler-markdown\n\n```",t.getCursor())}}),this.addCommand({id:"spoiler-env",name:"Create spoiler - Env",editorCallback:t=>{t.replaceRange("```spoiler-env\n\n```",t.getCursor())}});let n=(t,o)=>{let a=t.createEl("div",{cls:"spoiler"}),r=a.createEl("div",{cls:"spoiler__cover"});this.settings.showOnExport&&r.addClass("spoiler__cover--export__reveal"),r.createEl("p",{text:"Content hidden"});let s=a.createEl("div",{cls:"spoiler-toolbar"});return new p.ButtonComponent(s).setIcon("eye").setClass("spoiler-button").setTooltip("Click to reveal").onClick(function(i){i.stopPropagation(),r.toggleAttribute("data-visible")}),new p.ButtonComponent(s).setIcon("copy").setClass("spoiler-button").setTooltip("Copy to clipboard").onClick(function(i){i.stopPropagation(),navigator.clipboard.writeText(o)}),a};this.registerMarkdownCodeBlockProcessor("spoiler",(t,o)=>{let a=n(o,t);t.split(`
`).forEach(r=>a.createEl("div",{text:r}))}),this.registerMarkdownCodeBlockProcessor("spoiler-markdown",(t,o,a)=>{let r=n(o,t),s=new p.Component;p.MarkdownRenderer.render(this.app,t,r,a.sourcePath,s)}),this.registerMarkdownCodeBlockProcessor("spoiler-env",(t,o,a)=>{let r=n(o,t),s=(0,S.parse)(t),c=r.createEl("table",{cls:"spoiler-table"}).createEl("tbody");for(let[d,g]of Object.entries(s)){let D=c.createEl("tr"),A=D.createEl("td",{text:d,cls:"spoiler-table-cell"}),j=D.createEl("td",{text:g,cls:"spoiler-table-cell"});new p.ButtonComponent(A).setIcon("copy").setClass("spoiler-table-copy").setTooltip("Copy key").onClick(function(){navigator.clipboard.writeText(d)}),new p.ButtonComponent(j).setIcon("copy").setClass("spoiler-table-copy").setTooltip("Copy value").onClick(function(){navigator.clipboard.writeText(g)})}})}async loadSettings(){this.settings=Object.assign({},I,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
//# sourceMappingURL=data:application/json;base64,
